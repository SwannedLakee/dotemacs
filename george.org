#+TITLE:-George's-emacs-config!
* PACKAGE MANAGEMENT
#+BEGIN_SRC emacs-lisp
   (require 'package)

   (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			    ("org" . "https://orgmode.org/elpa/")
			    ("elpa" . "https://elpa.gnu.org/packages/")))

  (global-set-key (kbd "C-s") 'swiper)
   (package-initialize)
   (unless package-archive-contents

     (package-refresh-contents))

   (add-to-list 'load-path "~/.emacs.d/lisp")

   ;; Initialize use-package on non-Linux platforms
   (unless (package-installed-p 'use-package)
     (package-install 'use-package))

   (require 'use-package)
   (setq use-package-always-ensure t)

   (use-package command-log-mode)

   (setq org-agenda-files
	 '("~/Projects/Code/OrgFiles/Tasks.org"
	   "~/Projects/Code/OrgFiles/Birthdays.org"))
   (setq org-agenda-start-with-log-mode t)
   (setq org-log-done 'time)
   (setq org-log-into-drawer t)

   (setq org-todo-keywords
	 '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
	   (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

					   ;dnw
   (defun add-org-asterix ()
     "DOCSTRING"
     (if(eq 0 (current-columm))
	 (local-set-key (kbd "C-p") #'(insert "* "))))

  ;; (local-set-key (kbd "C-p") #'(insert "dsjfh"))

   (add-hook 'org-mode-hook 'add-org-asterix)

   (add-hook 'HOOK 'FUNCTION)
   (toggle-word-wrap t)
   (global-set-key (kbd "C-d") 'pop-global-mark)
   (define-key minibuffer-local-map (kbd "M-o") 'ivy-dispatching-done)

   ;; Example configuration for Consult
   (use-package consult
     ;; Replace bindings. Lazily loaded due by `use-package'.
     :bind (;; C-c bindings (mode-specific-map)
	    ("C-c h" . consult-history)
	    ("C-c m" . consult-mode-command)
	    ("C-c k" . consult-kmacro)
	    ;; C-x bindings (ctl-x-map)
	    ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
	    ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
	    ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
	    ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
	    ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
	    ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
	    ;; Custom M-# bindings for fast register access
	    ("M-#" . consult-register-load)
	    ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
	    ("C-M-#" . consult-register)
	    ;; Other custom bindings
	    ("M-y" . consult-yank-pop)                ;; orig. yank-pop
	    ("<help> a" . consult-apropos)            ;; orig. apropos-command

	    ;; M-g bindings (goto-map)
	    ("M-g e" . consult-compile-error)
	    ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
	    ("M-g g" . consult-goto-line)             ;; orig. goto-line
	    ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
	    ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
	    ("M-g m" . consult-mark)

	    ("M-g k" . consult-global-mark)
	    ("M-g i" . consult-imenu)
	    ("M-g I" . consult-imenu-multi)
	    ;; M-s bindings (search-map)
	    ("M-s d" . consult-find)
	    ("M-s D" . consult-locate)
	    ("M-s g" . consult-grep)
	    ("M-s G" . consult-git-grep)
	    ("M-s r" . consult-ripgrep)
	    ("M-s l" . consult-line)
	    ("M-s L" . consult-line-multi)
	    ("M-s m" . consult-multi-occur)
	    ("M-s k" . consult-keep-lines)
	    ("M-s u" . consult-focus-lines)
	    ;; Isearch integration
	    ("M-s e" . consult-isearch-history)
	    :map isearch-mode-map
	    ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
	    ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
	    ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
	    ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
	    ;; Minibuffer history
	    :map minibuffer-local-map
	    ("M-s" . consult-history)                 ;; orig. next-matching-history-element
	    ("M-r" . consult-history))                ;; orig. previous-matching-history-element

     ;; Enable automatic preview at point in the *Completions* buffer. This is
     ;; relevant when you use the default completion UI.
     :hook (completion-list-mode . consult-preview-at-point-mode)

     ;; The :init configuration is always executed (Not lazy)
     :init

     ;; Optionally configure the register formatting. This improves the register
     ;; preview for `consult-register', `consult-register-load',
     ;; `consult-register-store' and the Emacs built-ins.
     (setq register-preview-delay 0.5
	   register-preview-function #'consult-register-format)

     ;; Optionally tweak the register preview window.
     ;; This adds thin lines, sorting and hides the mode line of the window.
     (advice-add #'register-preview :override #'consult-register-window)

     ;; Use Consult to select xref locations with preview
     (setq xref-show-xrefs-function #'consult-xref
	   xref-show-definitions-function #'consult-xref)

     ;; Configure other variables and modes in the :config section,
     ;; after lazily loading the package.
     :config

     ;; Optionally configure preview. The default value
     ;; is 'any, such that any key triggers the preview.
     ;; (setq consult-preview-key 'any)
     ;; (setq consult-preview-key (kbd "M-."))
     ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
     ;; For some commands and buffer sources it is useful to configure the
     ;; :preview-key on a per-command basis using the `consult-customize' macro.
     (consult-customize
      consult-theme
      :preview-key '(:debounce 0.2 any)
      consult-ripgrep consult-git-grep consult-grep
      consult-bookmark consult-recent-file consult-xref
      consult--source-bookmark consult--source-recent-file
      consult--source-project-recent-file
      :preview-key (kbd "M-."))

     ;; Optionally configure the narrowing key.
     ;; Both < and C-+ work reasonably well.
     (setq consult-narrow-key "<") ;; (kbd "C-+")

     ;; Optionally make narrowing help available in the minibuffer.
     ;; You may want to use `embark-prefix-help-command' or which-key instead.
     ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

     ;; By default `consult-project-function' uses `project-root' from project.el.
     ;; Optionally configure a different project root function.
     ;; There are multiple reasonable alternatives to chose from.
		 ;;;; 1. project.el (the default)
     ;; (setq consult-project-function #'consult--default-project--function)
		 ;;;; 2. projectile.el (projectile-project-root)
     ;; (autoload 'projectile-project-root "projectile")
     ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
		 ;;;; 3. vc.el (vc-root-dir)
     ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
		 ;;;; 4. locate-dominating-file
     ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
     )

#+END_SRC
* XFK and keybindings and which key
#+BEGIN_SRC emacs-lisp

  (autoload 'xah-elisp-mode "xah-elisp-mode" "xah emacs lisp major mode." t)
  (xah-elisp-mode)

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0))

  (set-face-foreground 'mode-line "gray")
  (set-face-background 'mode-line "black")
  ;; (set-face-background 'mode-line-inactive "03fce7")
  ;; (set-face-attribute 'region nil :background "#f7f5f5")
  (set-face-foreground 'line-number "#565759")
  (set-face-background 'line-number "#000000")

  (require 'xah-fly-keys)
  (xah-fly-keys-set-layout "colemak-dhm")
  (xah-fly-keys 1)

  (key-chord-define-global "lu" 'elisp-code-block)
  (key-chord-define-global "st" 'xah-fly-insert-mode-activate)
  (key-chord-define-global "en" 'xah-fly-command-mode-activate)

  (abbrev-mode 1)
#+END_SRC
* Startup
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
  (setq initial-scratch-message nil)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (set-fringe-mode 5)
  (scroll-bar-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)
  (xclip-mode 1)
  ;;(defalias 'ivy-switch-buffer 'ibuffer); make ibuffer default
  ;; (use-package desktop
  ;;   :defer 2
  ;;   :config
  ;;   (setq desktop-path (list my-savefile-dir))
  ;;   (setq desktop-dirname my-savefile-dir)
  ;;   (setq desktop-restore-eager 5)
  ;;   (setq desktop-load-locked-desktop t)
  ;;   (desktop-save-mode +1))
  (require 'dired+)
  (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
  (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)

					  ;  (global-set-key (kbd "C-h-a") 'apropos-command) ;dnw

  (add-to-list 'default-frame-alist '(fullscreen . maximized))

;theme
(add-to-list 'load-path "~/.emacs.d/modus-themes")


;;; For the built-in themes which cannot use `require':
;; Add all your customizations prior to loading the themes
(setq modus-themes-italic-constructs t
      modus-themes-bold-constructs nil
      modus-themes-region '(bg-only no-extend))


;; Load the theme of your choice:
(load-theme 'modus-vivendi)

(define-key global-map (kbd "<f5>") #'modus-themes-toggle)



;;; For packaged versions which must use `require':
(require 'modus-themes)

;; Add all your customizations prior to loading the themes
(setq modus-themes-italic-constructs t
      modus-themes-bold-constructs nil
      modus-themes-region '(bg-only no-extend))

;; Load the theme files before enabling a theme
(modus-themes-load-themes)

;; Load the theme of your choice:
(modus-themes-load-vivendi)

(define-key global-map (kbd "<f5>") #'modus-themes-toggle)




  (use-package all-the-icons)
  (delete-selection-mode t)
  (define-key global-map (kbd "<f5>") #'modus-themes-toggle)
  (find-file "~/.emacs.d/george.org")

  ;; (define-key xah-fly-command-map (kbd "e") 'previous-line)
  ;; (define-key xah-fly-command-map (kbd "n") 'next-line)

  (define-key xah-fly-command-map (kbd "C-e") 'eval-last-sexp)
  (global-set-key (kbd "<f1>") 'check-parens)

  (define-key key-translation-map (kbd "ESC") (kbd "C-g"))

  ;; (defun x-activate-cmd-mode-n-keyboard-quit ()
  ;; "DOCSTRING"
  ;; (interactive)
  ;; (xah-fly-command-mode-activate)
  ;; (keyboard-quit))
  ;; (global-set-key "ESC" 'x-activate-cmd-mode-n-keyboard-quit)

#+END_SRC
** Startup performance
#+BEGIN_SRC emacs-lisp
  ;; Using garbage magic hack.
  (use-package gcmh
    :config
    (gcmh-mode 1))
  ;; Setting garbage collection threshold
  (setq gc-cons-threshold 402653184
	gc-cons-percentage 0.6)

  ;; Profile emacs startup
  (add-hook 'emacs-startup-hook
	    (lambda ()
	      (message "*** Emacs loaded in %s with %d garbage collections."
		       (format "%.2f seconds"
			       (float-time
				(time-subtract after-init-time before-init-time)))
		       gcs-done)))

  ;; Silence compiler warnings as they can be pretty disruptive (setqcomp-async-report-warnings-errors nil)
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp
  ;; (use-package magit
  ;; :ensure t)
  ;; (setq magit-display-buffer-function 'switch-to-buffer)

  (use-package magit
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

#+END_SRC
*** Vertico and Projectile
#+BEGIN_SRC emacs-lisp
  ;; Enable vertico
  (use-package vertico
    :init
    (vertico-mode)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    )

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist
    :init
    (savehist-mode))

  ;; A few more useful configurations...
  (use-package emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
		    (replace-regexp-in-string
		     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
		     crm-separator)
		    (car args))
	    (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
	  '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/Projects/Code")
      (setq projectile-project-search-path '("~/Projects/Code")))
    (setq projectile-switch-project-action #'projectile-dired))
  ;;gets rid of ^ at beginning of M-x
  (setq ivy-initial-inputs-alist nil)

  (use-package counsel-projectile
    :config (counsel-projectile-mode))
#+END_SRC
#+BEGIN_SRC emacs-lisp

#+END_SRC

#+BEGIN_SRC emacs-lisp
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )
  (defun fontify-frame (frame)
    (set-frame-parameter frame 'font "Consolas-13"))
  ;; Fontify current frame
  (fontify-frame nil)
  ;; Fontify any future frames
  (push 'fontify-frame after-make-frame-functions)
#+END_SRC
**** Org mode
#+BEGIN_SRC emacs-lisp
  (eval-after-load "org"
    '(progn
       (define-key org-mode-map (kbd "<M-S-left>") nil)
       "M-p"   '(org-meta-right :which-key "org-meta-right")
       ;;(global-set-key (kbd "C-M-<right>") 'org-metaright)
       ;;(global-set-key (kbd "C-M-<left>") 'org-metaright)

       ;;org-agenda
       (global-set-key (kbd "C-c a") 'org-agenda)))

#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
		  term-mode-hook
		  shell-mode-hook
		  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

  (add-hook 'calc-enter
	    (lambda()

	      (xah-fly-insert-mode-activate t)))

  ;; (defun jpk/lisp-modes-hook ()
  ;; (add-hook 'before-save-hook #'check-parens nil 'local))
  ;;
  ;; (add-hook 'lisp mode hook #'jpk/lisp modes hook)
  ;; (
  ;; add-hook 'emacs-lisp-mode-hook #'jpk/lisp-modes-hook)
#+END_SRC
* Dired
#+BEGIN_SRC emacs-lisp
  ;; (use-package dired
  ;; :ensure nil
  ;; :commands
  ;; :bind
  ;; ("DEL" . dired-up-directory)
  ;; :custom ((dired-listing-switches "=-agho --group-directories-first")
  ;; :config
  ;; ))

  ;; (define-key dired-mode-map (kbd "DEL") 'dired-up-directory)
  (setq dired-dwim-target t)
  (setq dired-hide-details-mode 1)

  (setq dired-recursive-copies 'top)

  (setq dired-recursive-deletes 'top)
  (defun xah-dired-mode-setup ()
    "to be run as hook for `dired-mode'."
    (dired-hide-details-mode 1))

  (add-hook 'dired-mode-hook 'xah-dired-mode-setup)

  (require 'dired )
  (define-key dired-mode-map (kbd "DEL") 'dired-up-directory)
  (define-key dired-mode-map (kbd "RET") 'dired-find-alternate-file)
  (define-key dired-mode-map (kbd "^") (lambda () (interactive) (find-alternate-file "..")))
#+END_SRC


