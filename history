;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by â€˜savehistâ€™.

(setq savehist-minibuffer-history-variables '(Info-search-history table-capture-min-cell-width-history table-capture-justify-history table-row-delim-regexp-history table-col-delim-regexp-history input-method-history org-tags-history org-refile-history read-number-history dired-regexp-history info-lookup-history face-name-history command-history regexp-history yes-or-no-p-history query-replace-history read-expression-history org-agenda-search-history org-read-date-history string-rectangle-history bookmark-history dired-shell-command-history empty-history consult--line-history file-name-history counsel-describe-symbol-history swiper-history search-ring consult--buffer-history consult--grep-history buffer-name-history minibuffer-history extended-command-history))
(setq Info-search-history '("d" "disa"))
(setq table-capture-min-cell-width-history '("5"))
(setq table-capture-justify-history '("left"))
(setq table-row-delim-regexp-history '("dgf" ""))
(setq table-col-delim-regexp-history '("," ""))
(setq org-tags-history '(":ttt:tag_word" "ttt"))
(setq dired-regexp-history '("cl"))
(setq face-name-history '("hi-yellow"))
(setq command-history '((Info-menu "Hooks" nil) (Info-menu "Hooks" nil) (Info-menu "Elisp" nil) (switch-to-buffer "*Messages*" nil 'force-same-window) (switch-to-buffer "*scratch*" nil 'force-same-window) (helpful-key "") (switch-to-buffer "*Messages*" nil 'force-same-window) (switch-to-buffer "george.org" nil 'force-same-window) (snake) (execute-extended-command nil "snake" nil) (snake) (execute-extended-command nil "snake" "snake") (Info-search "d") (Info-search "disa") (Info-menu "Tables" nil) (Info-menu "Org Mode" nil) (switch-to-buffer "george.org" nil 'force-same-window) (org-table-delete-column) (execute-extended-command nil "org-table-delete-column" nil) (org-table-delete-column) (execute-extended-command nil "org-table-delete-column" nil) (org-table-delete-column) (execute-extended-command nil "org-table-delete-column" "org-table-de") (helpful-key [M-left]) (helpful-key [M-left]) (helpful-key [M-S-right]) (where-is 'org-table-blank-field nil) (org-table-blank-field) (execute-extended-command nil "org-table-blank-field" "org-table-bl") (narrow-to-region (region-beginning) (region-end)) (execute-extended-command nil "narrow-to-region" "narr") (switch-to-buffer "notes.org" nil 'force-same-window) (switch-to-buffer "*Org Note*" nil 'force-same-window) (table-capture 1062 1085 "," "dgf" 'left "5" nil) (execute-extended-command nil "table-capture" "table") (org-table-create nil) (execute-extended-command nil "org-table-create" nil) (org-table-sum) (execute-extended-command nil "org-table-sum" "o") (org-table-create nil) (execute-extended-command nil "org-table-create" nil) (where-is 'org-table-create nil) (org-table-create nil) (execute-extended-command nil "org-table-create" "org-table") (org-table-sum) (execute-extended-command nil "org-table-sum" "org-table") (switch-to-buffer "notes.org" nil 'force-same-window) (switch-to-buffer "*Org Agenda*" nil 'force-same-window) (switch-to-buffer "*Messages*" nil 'force-same-window) (switch-to-buffer "*Messages*" nil 'force-same-window) (switch-to-buffer "george.org" nil 'force-same-window) (switch-to-buffer "*Org Agenda*" nil 'force-same-window) (switch-to-buffer "notes.org" nil 'force-same-window) (switch-to-buffer "george.org" nil 'force-same-window) (switch-to-buffer "notes.org" nil 'force-same-window) (switch-to-buffer "george.org" nil 'force-same-window) (switch-to-buffer "notes.org" nil 'force-same-window) (switch-to-buffer "george.org" nil 'force-same-window) (switch-to-buffer "notes.org" nil 'force-same-window) (switch-to-buffer "george.org" nil 'force-same-window) (org-insert-structure-template "src") (org-insert-structure-template "center") (org-insert-structure-template "verse") (org-insert-structure-template "quote") (org-insert-structure-template "comment") (switch-to-buffer "init2.el" nil 'force-same-window) (switch-to-buffer "george.org" nil 'force-same-window) (find-file "~/init2.el" t) (switch-to-buffer "*Messages*" nil 'force-same-window) (xah-elisp-mode) (execute-extended-command nil "xah-elisp-mode" "xahe") (switch-to-buffer "*helpful variable: org-level-faces*" nil 'force-same-window) (helpful-key "") (org-open-at-point nil) (execute-extended-command nil "org-open-at-point" "org-open") (where-is 'browse-url nil) (browse-url "https://www.youtube.com/watch?v=67dE1lfDs9k&list=PL8tzorAO7s0he-pp7Y_JDl7-Kz2Qlr_Pj&index=6" nil) (execute-extended-command nil "browse-url" "bro") (switch-to-buffer "*scratch*" nil 'force-same-window) (Info-menu "use-package" nil) (helpful-key "i") (switch-to-buffer "george.org" nil 'force-same-window) (dired "c:/Program Files/Emacs/" nil) (switch-to-buffer "*scratch*" nil 'force-same-window) (org-mode) (execute-extended-command nil "org-mode" nil) (org-mode) (execute-extended-command nil "org-mode" nil) (org-mode) (execute-extended-command nil "org-mode" nil) (org-mode) (execute-extended-command nil "org-mode" nil) (org-mode) (execute-extended-command nil "org-mode" nil) (org-mode) (execute-extended-command nil "org-mode" nil) (org-mode) (execute-extended-command nil "org-mode" nil) (org-mode) (execute-extended-command nil "org-mode" nil)))
(setq regexp-history '("xah"))
(setq yes-or-no-p-history '("yes"))
(setq query-replace-history '("me" "we" "sntestne" "bec" "," ", " "," ", " "," ", " ","))
(setq org-agenda-search-history '("tag" "birth"))
(setq org-read-date-history '("   " "+2sun 2pm    " "   " " 45    " "   "))
(setq bookmark-history '("elispFun.el" "elispFun.el" "notes.org" "elispFun.el" "notes.org" "george.org" "notes.org" "george.org" "randomtxt.txt" "Emacs questions.org" "elispFun.el" "Emacs questions.org" "elispFun.el" "randomtxt.txt" "randomtxt.txt" "elispFun.el" "Emacs questions.org" "Emacs questions.org" "elispFun.el" "Emacs questions.org" "elispFun.el" "notes.org" "notes.org" "Emacs questions.org" "elispFun.el" "Tasks.org" "Emacs questions.org" "notes.org" "Emacs questions.org" "Emacs questions.org" "elispFun.el" "randomtxt.txt" "notes.org" "Emacs questions.org" "notes.org" "Emacs questions.org" "Emacs questions.org" "notes.org" "Emacs questions.org" "randomtxt.txt"))
(setq file-name-history '("~/init2.el" "c:/Program Files/Emacs/" "~/dired fun/" "~/dired fun" "~/stensttt" "~/.emacs.d/" "c:/Users/George/stickingapp.el" "~/Projects/Code/OrgFiles/Tasks.org" "~/Projects/Code/OrgFiles/Birthdays.org" "~/Projects/Code/OrgFiles/Tasks.org" "~/" "~/.emacs.d/" "~/.emacs.d/lisp/dired+.el" "c:/Users/George/.emacs.d/lisp/dired+.el" "~/" "c:/Users/George/notes.org" "c:/Program Files/Emacs/" "~/.emacs.d/init.el" "~/.emacs.d/lisp/ezf/ezf.el"))
(setq counsel-describe-symbol-history '(#("org-table-dele" 0 14 (ivy-index 0)) "org-table-delete-column" #("find-file" 0 9 (ivy-index 20)) #("org-level" 0 9 (ivy-index 0)) "org-level-faces" #("use-package" 0 11 (ivy-index 115)) #("add-hook" 0 8 (ivy-index 16363)) #("after-sav" 0 9 (ivy-index 1)) "after-save-hook" #("add-hoo" 0 7 (ivy-index 2)) #("add hook" 0 8 (ivy-index 0)) "org-add-hook" #("dire next dir" 0 13 (ivy-index 1)) "dired-next-dirline" #("dired jump" 0 10 (ivy-index 4)) "dired-jump" #("xah-open" 0 8 (ivy-index 1)) "xah-open-last-closed" #("dired" 0 5 (ivy-index 534)) #("other window scr" 0 16 (ivy-index 0)) "other-window-for-scrolling" #("add-g" 0 5 (ivy-index 0)) "add-global-abbrev" #("abbrev-mode" 0 11 (ivy-index 2)) #("split-line" 0 10 (ivy-index 1)) #("split-string" 0 12 (ivy-index 3)) #("delete-region" 0 13 (ivy-index 11748)) #("xah-in" 0 6 (ivy-index 3)) "xah-insert-date" #("previous-line" 0 13 (ivy-index 7)) #("xah-sele" 0 8 (ivy-index 2)) "xah-select-line" #("thing" 0 5 (ivy-index 2)) "thing-at-mouse" #("bounds of thi" 0 13 (ivy-index 0)) "bounds-of-thing-at-point" #("point-min" 0 9 (ivy-index 2813)) #("xah-elisp mode" 0 14 (ivy-index 0)) "xah-elisp-mode" #("command log mode" 0 16 (ivy-index 3)) "command-log-mode" #("dotimes" 0 7 (ivy-index 1658)) #("interactive" 0 11 (ivy-index 22259)) #("local-set-key" 0 13 (ivy-index 10239)) #("insert" 0 6 (ivy-index 4900)) #("eval print" 0 10 (ivy-index 4)) "eval-print-last-sexp" #("just one" 0 8 (ivy-index 0)) "just-one-space" #("art mode" 0 8 (ivy-index 4)) "artist-mode" "artist-mode" #("zone-" 0 5 (ivy-index 2)) "zone-mode" #("snake" 0 5 (ivy-index 15)) #("match$" 0 6 (ivy-index 15)) "cl--check-match" #("search-forward" 0 14 (ivy-index 16160)) #("xah-run" 0 7 (ivy-index 0)) "xah-run-current-file" #("open line" 0 9 (ivy-index 1)) "open-line" #("region act" 0 10 (ivy-index 1)) "region-active-p" #("case fold sea" 0 13 (ivy-index 2)) "toggle-case-fold-search" #("xah-del" 0 7 (ivy-index 3)) "xah-delete-backward-char-or-bracket-text" #("point" 0 5 (ivy-index 2683)) #("set-buffer" 0 10 (ivy-index 13983)) #("switch-to-buffer" 0 16 (ivy-index 17179)) #("generate-new-buffer" 0 19 (ivy-index 5331)) #("togg debug" 0 10 (ivy-index 2)) "toggle-debug-on-quit" #("error" 0 5 (ivy-index 9468)) #("condition-case" 0 14 (ivy-index 12017)) #("org-log-into-drawer" 0 19 (ivy-index 2592)) #("let" 0 3 (ivy-index 18182)) #("lambda" 0 6 (ivy-index 5429)) #("elt" 0 3 (ivy-index 15552)) #("dolist" 0 6 (ivy-index 17)) #("let*" 0 4 (ivy-index 10282)) #("xah-cyc" 0 7 (ivy-index 0)) "xah-cycle-hyphen-lowline-space" #("^displ line number mode" 0 23 (ivy-index 0)) "display-line-numbers-mode" #(" " 0 1 (ivy-index 2)) "font-lock-syntactically-fontified"))
(setq swiper-history '("defun f ()" "scroll" #("command-map" 0 11 (ivy-index 1)) #("   ;; (define-key xah-fly-command-map (kbd \"n\") 'next-line)" 0 1 (display "273 " swiper-line-number 273) 1 59 (fontified nil)) "mode" #("lambda" 0 6 (ivy-index 6)) #("   (define-key dired-mode-map (kbd \"^\") (lambda () (interactive) (find-alternate-file \"..\")))" 0 1 (swiper-line-number 484 display "484 ") 1 3 (fontified t) 3 4 (fontified t face (rainbow-delimiters-depth-1-face)) 4 14 (fontified t face font-lock-function-name-face) 14 30 (fontified t) 30 31 (fontified t face (rainbow-delimiters-depth-2-face)) 31 34 (fontified t face font-lock-function-name-face) 34 35 (fontified t) 35 38 (fontified t face font-lock-string-face) 38 39 (fontified t face (rainbow-delimiters-depth-2-face)) 39 40 (fontified t) 40 41 (fontified t face (rainbow-delimiters-depth-2-face)) 41 47 (fontified t face font-lock-keyword-face) 47 48 (fontified t) 48 49 (fontified t face (rainbow-delimiters-depth-3-face)) 49 50 (fontified t face (rainbow-delimiters-depth-3-face)) 50 51 (fontified t) 51 52 (fontified t face (rainbow-delimiters-depth-3-face)) 52 63 (fontified t face font-lock-keyword-face) 63 64 (fontified t face (rainbow-delimiters-depth-3-face)) 64 65 (fontified t) 65 66 (fontified t face (rainbow-delimiters-depth-3-face)) 66 86 (fontified t) 86 90 (fontified t face font-lock-string-face) 90 91 (fontified t face (rainbow-delimiters-depth-3-face)) 91 92 (fontified t face (rainbow-delimiters-depth-2-face)) 92 93 (fontified t face (rainbow-delimiters-depth-1-face))) "lambdac" #("     (add-hook mode (lambda () (display-line-numbers-mode 0))))" 0 1 (swiper-line-number 440 display "440 ") 1 5 (fontified t) 5 6 (fontified t face (rainbow-delimiters-depth-2-face)) 6 14 (fontified t face font-lock-function-name-face) 14 20 (fontified t) 20 21 (fontified t face (rainbow-delimiters-depth-3-face)) 21 27 (fontified t face font-lock-keyword-face) 27 28 (fontified t) 28 29 (fontified t face (rainbow-delimiters-depth-4-face)) 29 30 (fontified t face (rainbow-delimiters-depth-4-face)) 30 31 (fontified t) 31 32 (fontified t face (rainbow-delimiters-depth-4-face)) 32 59 (fontified t) 59 60 (fontified t face (rainbow-delimiters-depth-4-face)) 60 61 (fontified t face (rainbow-delimiters-depth-3-face)) 61 62 (fontified t face (rainbow-delimiters-depth-2-face)) 62 63 (fontified t face (rainbow-delimiters-depth-1-face))) #("mode-m" 0 6 (ivy-index 3)) #("   (define-key dired-mode-map (kbd \"DEL\") 'dired-up-directory)" 0 1 (display "481 " swiper-line-number 481) 1 3 (fontified t) 3 4 (face (rainbow-delimiters-depth-1-face) fontified t) 4 14 (face font-lock-function-name-face fontified t) 14 30 (fontified t) 30 31 (face (rainbow-delimiters-depth-2-face) fontified t) 31 34 (face font-lock-function-name-face fontified t) 34 35 (fontified t) 35 40 (face font-lock-string-face fontified t) 40 41 (face (rainbow-delimiters-depth-2-face) fontified t) 41 61 (fontified t) 61 62 (face (rainbow-delimiters-depth-1-face) fontified t)) #("-ins" 0 4 (ivy-index 4)) "swiper" "ll" "p" #("line" 0 4 (ivy-index 24)) "word" #("consult" 0 7 (ivy-index 2)) "command-mo" "normaliz" "hj" "df" "remap" #("swi" 0 3 (ivy-index 0)) #(" (global-set-key (kbd \"C-s\") 'swiper)" 0 1 (swiper-line-number 24 display "24  ") 1 2 (fontified t face (rainbow-delimiters-depth-1-face)) 2 16 (fontified t face xah-elisp-command-face) 16 17 (fontified t) 17 18 (fontified t face (rainbow-delimiters-depth-2-face)) 18 21 (fontified t face font-lock-function-name-face) 21 22 (fontified t) 22 27 (fontified t face font-lock-string-face) 27 28 (fontified t face (rainbow-delimiters-depth-2-face)) 28 36 (fontified t) 36 37 (fontified t face (rainbow-delimiters-depth-1-face))) "lay" "key" "ivy" "counsel" "key gl" "remap" #("remap" 0 5 (ivy-index 0)) #(" 	  ([remap describe-function] . counsel-describe-function)" 0 1 (swiper-line-number 403 display "403 ") 1 4 (font-lock-fontified t help-echo nil src-block t fontified t) 4 5 (font-lock-fontified t help-echo nil src-block t fontified t face (rainbow-delimiters-depth-2-face)) 5 6 (font-lock-fontified t help-echo nil src-block t fontified t face (rainbow-delimiters-depth-3-face)) 6 29 (font-lock-fontified t help-echo nil src-block t fontified t) 29 30 (font-lock-fontified t help-echo nil src-block t fontified t face (rainbow-delimiters-depth-3-face)) 30 58 (font-lock-fontified t help-echo nil src-block t fontified t) 58 59 (font-lock-fontified t help-echo nil src-block t fontified t face (rainbow-delimiters-depth-2-face))) "global" "bind" "swiper" #("ivy" 0 3 (ivy-index 0)) #(" *** Ivy and Projectile" 0 1 (swiper-line-number 137 display "137 ") 1 23 (fontified nil))))
(setq search-ring '(#(".org" 0 4 (isearch-regexp-function nil isearch-case-fold-search t)) #("scheduledj" 0 10 (isearch-regexp-function nil isearch-case-fold-search t)) #("viven" 0 5 (isearch-case-fold-search t isearch-regexp-function nil)) #("modus" 0 5 (isearch-case-fold-search t isearch-regexp-function nil)) #("fset" 0 4 (isearch-case-fold-search t isearch-regexp-function nil)) #("49kbwm3rqq81" 0 12 (isearch-case-fold-search t isearch-regexp-function nil)) #("m6" 0 1 (isearch-regexp-function nil isearch-case-fold-search t) 1 2 (isearch-regexp-function nil isearch-case-fold-search t)) #("add-hook" 0 8 (isearch-regexp-function nil isearch-case-fold-search t)) #("aster" 0 5 (isearch-case-fold-search t isearch-regexp-function nil)) #("cu" 0 2 (isearch-regexp-function nil isearch-case-fold-search t)) #("local l" 0 7 (isearch-case-fold-search t isearch-regexp-function nil)) #("menuz" 0 5 (isearch-case-fold-search t isearch-regexp-function nil)) #("dire" 0 4 (isearch-case-fold-search t isearch-regexp-function nil)) #("dired" 0 5 (isearch-case-fold-search t isearch-regexp-function nil)) #("menu" 0 4 (isearch-case-fold-search t isearch-regexp-function nil)) #("mm" 0 2 (isearch-case-fold-search t isearch-regexp-function nil))))
(setq consult--buffer-history '("george.orgøˆ€€‚" "*Help*øˆ€€‚" "george.orgøˆ€€‚" "Birthdays.orgøˆ€€‚" "Tasks.orgøˆ€€‚" "*helpful function: org-log-into-drawer*øˆ€€‚" "george.orgøˆ€€‚" "Tasks.orgøˆ€€‚" "notes.orgøˆ€€‚" "george.orgøˆ€€‚" "notes.orgøˆ€€‚" "george.orgøˆ€€‚" "b" "Birthdays.orgøˆ€€‚" "*Org Agenda*øˆ€€‚" "george.orgøˆ€€‚" "Birthdays.orgøˆ€€‚" "george.orgøˆ€€‚" "Tasks.orgøˆ€€‚" "george.orgøˆ€€‚" "Tasks.orgøˆ€€‚" "*Org Agenda*øˆ€€‚" "george.orgøˆ€€‚" "*Org Agenda*øˆ€€‚" "Tasks.orgøˆ€€‚" "george.orgøˆ€€‚" "Tasks.orgøˆ€€‚" "george.orgøˆ€€‚" "notes.orgøˆ€€‚" "george.orgøˆ€€‚" "notes.orgøˆ€€‚" "george.orgøˆ€€‚" "*Org Agenda*øˆ€€‚" "notes.orgøˆ€€‚" "george.orgøˆ€€‚" "notes.orgøˆ€€‚" "george.orgøˆ€€‚" "*Messages*øˆ€€‚" "elispFun.eløˆ€€‚" "*Bookmark List*øˆ€€‚" "elispFun.eløˆ€€‚" "*Bookmark List*øˆ€€‚" "elispFun.eløˆ€€ƒ" "notes.orgøˆ€€‚" "randomtxt.txtøˆ€€ƒ" "notes.orgøˆ€€ƒ" "notes.orgøˆ€€‚" "u" "notes.orgøˆ€€ƒ" "george.orgøˆ€€‚" "untitledøˆ€€‚" "george.orgøˆ€€‚" "untitledøˆ€€‚" "george.orgøˆ€€‚" "untitledøˆ€€‚" "george.orgøˆ€€‚" "untitledøˆ€€‚" "george.orgøˆ€€‚" "randomtxt.txtøˆ€€‚" "george.orgøˆ€€‚" "*copy history*øˆ€€‚" "george.orgøˆ€€‚" "randomtxt.txtøˆ€€‚" "george.orgøˆ€€‚" "randomtxt.txtøˆ€€‚" "randomtxt.txtøˆ€€ƒ" "george.orgøˆ€€‚" "*scratch*øˆ€€‚" "randomtxt.txtøˆ€€ƒ" "elispFun.eløˆ€€ƒ" "george.orgøˆ€€‚" "Emacs questions.orgøˆ€€ƒ" "*helpful command: switch-to-buffer*øˆ€€‚" "*Messages*øˆ€€‚"))
(setq buffer-name-history '("*Messages*" "*scratch*" "*Messages*" "george.org" "notes.org" "*Org Note*" "notes.org" "*Org Agenda*" "*Messages*" "george.org" "*Org Agenda*" "notes.org" "george.org" "notes.org" "george.org" "notes.org" "george.org" "notes.org" "george.org" "init2.el" "george.org" "*Messages*" "*helpful variable: org-level-faces*" "*scratch*" "george.org" "*scratch*" "george.org" "*scratch*" "george.org" "*scratch*" "george.org" "elispFun.el" "george.org" "*info*" "*helpful function: org-add-hook*" "randomtxt.txt" "elispFun.el" "randomtxt.txt" "george.org" "*helpful function: org-add-hook*" "george.org" "elispFun.el" "george.org" "*Abbrevs*" "elispFun.el" "*Abbrevs*" "elispFun.el" "Emacs questions.org" "elispFun.el" "George" "elispFun.el" "*scratch*" "elispFun.el" "George" "*helpful function: point-min*" "*Backtrace*" "elispFun.el" "Emacs questions.org" "elispFun.el" "Emacs questions.org" "elispFun.el" "george.org" "*scratch*" "*Bookmark List*" "elispFun.el" "*Bookmark List*" "elispFun.el" "*Messages*" "stickingapp.el" "*Org Attach*" "george.org" "elispFun.el" "*Messages*" "elispFun.el" "*Bookmark List*" "elispFun.el" "george.org" "stickingapp.el" "george.org" "stickingapp.el" "george.org" "*scratch*" "george.org" "*scratch*" "george.org" "*scratch*" "george.org" "*scratch*" "george.org" "*scratch*" "george.org" "untitled<2>" "*scratch*" "untitled<2>" "*scratch*" "untitled<2>" "*scratch*" "untitled<2>" "*scratch*" "untitled<2>"))
(setq minibuffer-history '("Hooks" "Elisp" "Tables" "Org Mode" "org-table-blank-field" "5x2" "org-table-create" "browse-url" "https://www.youtube.com/watch?v=67dE1lfDs9k&list=PL8tzorAO7s0he-pp7Y_JDl7-Kz2Qlr_Pj&index=6" "use-package" "hook" "st" "6 â†’ Thursday, April 12, 2018" " numeric" "bg" "car" "faq" "kb" "bg" "background" "let" "Cons Cells" "Elisp" "newline" "xah-insert-space-before" "move-beginning-of-line" "CAT" "stringp" "(paren)" "meeeee" "my-sticking-map-R" "make-sparse-keymap" "xah-backward-left-bracket" "info" "Info Lookup" "Registers" "Org Mode" "Index" "xah-fly-command-map" "xah-insert-paren" "artist" "xah-run-current-file" "xah-delete-blank-lines" "xah-delete-backward-char-or-bracket-text" "region-active-p" "current-column" "org-agenda-mode" "Tasks.org" "org-agenda" "xah-fly-command-map" "wc-mode" "embark" "notes.org" "where-is" "helm-core" "consult" "swiper" "vertico"))
(setq extended-command-history '("snake" "org-table-delete-column" "org-table-blank-field" "narrow-to-region" "table-capture" "org-table-create" "org-table-sum" "org-table-create" "org-table-sum" "xah-elisp-mode" "org-open-at-point" "browse-url" "org-mode" "xah-elisp-mode" "dired-next-dirline" "list-packages" "line-number-mode" "edit-abbrevs" "edit-abbrevs-redefine" "edit-abbrevs" "list-abbrevs" "abbrev-mode" "add-global-abbrev" "split-line" "print-word-under-cursor" "special-display-function" "visible-mode" "line-number-mode" "pr-ps-file-preview" "xah-insert-space-before" "print-word-under-cursor" "copy-word-under-cursor" "move-beginning-of-line" "highlight-lines-matching-regexp" "xah-insert-corner-bracket" "xah-space-to-newline" "command-log-mode" "my-sticking" "my-sticking-map-R" "org-mode" "xah-backward-left-bracket" "shell" "stst" "xah-elisp-mode" "org-mode" "stst" "org-search-view" "org-columns" "f" "xah-elisp-mode" "sticking-app-mode" "eval-region" "sticking-app-mode" "xah-elisp-mode" "mymath-mode" "xah-elisp-mode" "mymath-mode" "xah-elisp-mode" "mymath-mode" "xah-elisp-mode" "mymath-mode" "eval-print-last-sexp" "xah-elisp-mode" "org-insert-structure-template" "just-one-space" "xah-shrink-whitespaces" "artist-mode" "zone-mode" "snake" "aaa" "tt" "xah-extend-selection" "xah-delete-blank-lines" "widen" "eldoc-mode" "xah-delete-backward-char-or-bracket-text" "xah-paste-or-paste-previous" "xah-shrink-whitespaces" "widen" "narrow-to-region" "xah-elisp-complete-or-indent" "edebug-mode" "toggle-debug-on-error" "xah-elisp-mode" "debugger-mode" "toggle-debug-on-error" "xah-elisp-mode" "ielm" "org-mode" "xah-elisp-mode" "org-mode" "xah-elisp-mode" "org-mode" "org-todo" "org-mode" "xah-elisp-mode" "at-one-to-each" "xah-cycle-hyphen-lowline-space" "recover-this-file" "recentf-open-files"))
(setq projectile-project-command-history '#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ()))
